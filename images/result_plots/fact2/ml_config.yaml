# seed for the random number generators, to make things reproducible
seed: 0


# telescope_type_key: telescope_type_name
telescope_events_key: telescope_events
array_events_key: array_events
runs_key: runs


multiple_telescopes: True


# selection:
#     length:
#       - '>'
#       - 0.02
#     width:
#       - '>'
#       - 0.01

# config for the energy regression
energy:
  regressor : |
    ensemble.RandomForestRegressor(
      n_estimators=150,
      max_features='sqrt',
      n_jobs=-1,
      max_depth=12,
    )
  target_column: mc_energy

  # define the number of cross validations to perform
  n_cross_validations : 3

  # Define the name of the category you want to find. The default is 'gamma_energy'.
  # It will be written as <class_name>_prediction into the file when applying the model.
  class_name: gamma_energy

  # Define the name of the column that contains the name of the telescope in case you're working
  # with mulitple telescopes and telescope types
  telescope_type_key: telescope_type_name

  features:
    - h_max
    - width
    - length
    - skewness
    - kurtosis
    - intensity
    - camera_type_id
    - telescope_type_id
    - distance_to_reconstructed_core_position
    - slope
    - intercept
    - num_islands
    - psi
    - phi
    - r
    - leakage1_intensity
    - leakage1_pixel
    - leakage2_intensity
    - leakage2_pixel
    - concentration_core
    - concentration_pixel

  feature_generation:
    needed_columns:
      - width
      - length
      - intensity
    features:
      area: width * length
      width_length: 1 - (width / length)
      log_size: log(intensity)
      log_size_area: log(intensity) / (width * length)


# config for the g/h separation
separator:
  classifier : |
    ensemble.RandomForestClassifier(
        n_estimators=150,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=15,
        criterion='entropy',
    )
  # n_signal: 100000
  #n_background: 100000

  n_cross_validations : 3

  # telescope_type_key: telescope_type_name
  # telescope_events_key: telescope_events
  # array_events_key: array_events
  # runs_key: runs

  multiple_telescopes: True

  calibrate_classifier: True

  features:   # remove array event features
    - h_max
    - width
    - length
    - skewness
    - kurtosis
    - intensity
    - camera_type_id
    - telescope_type_id
    - distance_to_reconstructed_core_position
    - slope
    - intercept
    - num_islands
    - psi
    - phi
    - r
    - leakage1_intensity
    - leakage1_pixel
    - leakage2_intensity
    - leakage2_pixel
    - concentration_core
    - concentration_pixel

  feature_generation:
    needed_columns:
      - width
      - length
      - intensity
    features:
      area: width * length
      width_length: 1 - (width / length)
      log_size: log(intensity)
      log_size_area: log(intensity) / (width * length)


# added

disp:
  disp_regressor : |
    ensemble.RandomForestRegressor(
        n_estimators=200,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=20,
    )

  sign_classifier: |
    ensemble.RandomForestClassifier(
        n_estimators=200,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=20,
    )

  source_az_column: mc_az
  source_zd_column: mc_alt ### altitude -> offset
  pointing_az_column: pointing_azimuth
  pointing_zd_column: pointing_altitude ###offset 90Â°
  cog_x_column: x  ## added
  cog_y_column: y  ## added
  delta_column: psi ##????

  # randomly sample the data if you dont want to use the whole set
  # n_signal : 200000

  features:
    - width
    - length
    - skewness
    - kurtosis
    - intensity
    - camera_type_id
    - telescope_type_id
    - distance_to_reconstructed_core_position
    - slope
    - intercept
    - num_islands
    - psi
    - phi
    - r
    - leakage1_intensity
    - leakage1_pixel
    - leakage2_intensity
    - leakage2_pixel
    - concentration_core
    - concentration_pixel

  feature_generation:
    needed_columns:
      - width
      - length
      - intensity
    features:
      area: width * length * @pi
      width_length: 1 - (width / length)
      log_size: log(intensity)
      log_size_area: log(intensity) / (width * length * @pi)
